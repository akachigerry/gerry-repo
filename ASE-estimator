#!/usr/bin/python
import sys, getopt
import numpy
import scipy
from scipy.stats import beta
import itertools
from multiprocessing.pool import Pool
from functools import partial
import copy_reg
from multiprocessing.dummy import Pool as ThreadPool 
import operator 

def main(argv):
    ASEReadcountFile = ''
    gff = ''
    phasedGenotypeFile = ''
    sampleName = ''
    AllGenes = ''
    ASEgenes = ''
    try:
	opts, args = getopt.getopt(argv,"hr:g:p:s:", ["output1=", "output2="])
    except getopt.GetoptError, err:
	print str(err)
	usage()
	sys.exit(2)
    for opt, arg in opts:
	if opt == '-h':
	    print 'ASEstimator.py -r <ASEReadcountFile> -g <gff> -p <phasedGenotypeFile> -s <sampleName> --output1 <AllGenes> --output2 <ASEgenes>'
	    sys.exit()
	elif opt in ("-r"):
	    ASEReadcountFile = arg
	elif opt in ("-g"):
	    gff = arg
	elif opt in ("-p"):
	    phasedGenotypeFile = arg
	elif opt in ("-s"):
	    sampleName = arg
	elif opt in ("--output1"):
	    AllGenes = arg
	elif opt in ("--output2"):
	    ASEgenes = arg
    print 'Read count over SNP loci shown in "', ASEReadcountFile
    print 'Gene annotation file is "', gff
    print 'Phased SNP data is "', phasedGenotypeFile
    print 'Sample is "', sampleName
    print 'ASE estimation in all genes is "', AllGenes
    print 'ASE estimation in imbalanced genes is "', ASEgenes
if __name__=="__main__":
   main(sys.argv[1:])	
readCounts = open(sys.argv[2],'r')
gff = open(sys.argv[4],'r')
phasedGenotype = open(sys.argv[6],'r')
geneid = None    
hapSegment = None
disparitycount = None
paritycount = None
sampleName = sys.argv[8]
AllGenes = sys.argv[10]
ASEgenes = sys.argv[12] 
countlines = readCounts.readlines()

#find gene location of each SNP locus
def extractsamplename(phasedGenotype, sampleName):
	for line in phasedGenotype:
		if '#CHROM' in line:
			genotypeLine1 = line.strip().split('\t')
			if sampleName in line:			
	     			y = genotypeLine1.index(sampleName)
			else:
				raise ValueError ('No genotype data for sample. Please provide sample genotype information in vcf file')
			break
	phasedGenotype.seek(0)
	return y;
f = extractsamplename(phasedGenotype, sampleName)
f = int(f)
genotypeline = phasedGenotype.readlines()
genotypeline1 = [i for i in genotypeline if i[0] != '#']
countlines1 = [i for i in countlines if i[0] != 'c']

def lnsplit(ln):
	b = ln.strip().split('\t')
	return b;

def lnsplit1(ln1):
	d = ln1.strip().split('\t')[0:8]
	return d;

pool = ThreadPool(8)
genotypeLine2 = pool.map(lnsplit, genotypeline1)
genotypeLine2 = [x for x in genotypeLine2 if x != ['']]

hap1RatioLine = pool.map(lnsplit1, countlines1)
hap1RatioLine = [x for x in hap1RatioLine if x != ['']]

a = 0
hap1RatioFile = []
for i in range(0, len(genotypeLine2)):       	
       	if i < (len(genotypeLine2))-1:
		#Select heterozygous loci and arrange read counts according to haplotypes
		if genotypeLine2[i][0] == hap1RatioLine[a][0] and int(genotypeLine2[i][1]) > int(hap1RatioLine[a][1]):
			print "Warning!", hap1RatioLine[a][0], "position", hap1RatioLine[a][1], "not found in vcf file"
			a += 1
			i -= 1
 			continue
		if genotypeLine2[i][0] != hap1RatioLine[a][0] or genotypeLine2[i][1] != hap1RatioLine[a][1]:
			continue
		if genotypeLine2[i][0] == hap1RatioLine[a][0] and genotypeLine2[i][1] == hap1RatioLine[a][1] and genotypeLine2[i][f].strip().split(':')[0] == '0/1' \
				and float(hap1RatioLine[a][5]) / int(hap1RatioLine[a][7]) >= 0.1 or float(hap1RatioLine[a][5]) / int(hap1RatioLine[a][7]) <= 0.9:
			if '-' not in genotypeLine2[i][f].strip().split(':')[1]:
				a += 1
				continue
			elif '-' in genotypeLine2[i][f].strip().split(':')[1] and \
						genotypeLine2[i][f].strip().split(':')[1].split(',')[0].split('-')[1] == '1':
					refcount = float(hap1RatioLine[a][5])
					altcount = float(hap1RatioLine[a][6])
					totcount = int(hap1RatioLine[a][7])
					hap1Ratio = refcount / totcount
					refratio = refcount / totcount
					hapSegment = genotypeLine2[i][f].strip().split(':')[1].split(',')[0].split('-')[0]
					hap = genotypeLine2[i][f].strip().split(':')[1].split(',')[0].split('-')[1]
					hap1RatioLine1 = hap1RatioLine[a]
					hap1RatioLine1.append(hap)		
					hap1RatioLine1.append(hapSegment)
					hap1RatioLine1.append(str(hap1Ratio))
					hap1RatioLine1.append(str(refratio))
					hap1RatioFile.append('\t'.join(hap1RatioLine1))
					a += 1
					continue		
			elif '-' in genotypeLine2[i][f].strip().split(':')[1] and \
						genotypeLine2[i][f].strip().split(':')[1].split(',')[0].split('-')[1] == '2':
					refcount = float(hap1RatioLine[a][5])
					altcount = float(hap1RatioLine[a][6])
					totcount = int(hap1RatioLine[a][7])
					hap1Ratio1 = altcount / totcount
					refratio1 = refcount / totcount
					hapSegment = genotypeLine2[i][f].strip().split(':')[1].split(',')[0].split('-')[0]
					hap = genotypeLine2[i][f].strip().split(':')[1].split(',')[0].split('-')[1]
					hap1RatioLine1 = hap1RatioLine[a]
					hap1RatioLine1.append(hap)
					hap1RatioLine1.append(hapSegment)
					hap1RatioLine1.append(str(hap1Ratio1))
					hap1RatioLine1.append(str(refratio1))
					hap1RatioFile.append('\t'.join(hap1RatioLine1))
					a += 1
					continue
		if genotypeLine2[i][0] == hap1RatioLine[a][0] and genotypeLine2[i][1] == hap1RatioLine[a][1] and \
				genotypeLine2[i][f].strip().split(':')[0] != '0/1' and refcount / totcount < 0.1 or refcount / totcount > 0.9:	
			a += 1
			continue	
									
#Find gene positions of SNP loci
gffInp = gff.readlines()
gffInp1 = pool.map(lnsplit, gffInp)
gffInp1 = [x for x in gffInp1 if '#' not in x[0]]
gffInp1 = sorted(gffInp1)
hap1RatioFile1 = pool.map(lnsplit, hap1RatioFile)

#Apend gene Id from gff
def append_gene(x, gfffile):
	for i in xrange(0, len(gfffile)):
		if i < len(gfffile)-1:
			if x[0] == gfffile[i][0] and int(x[1]) >= int(gfffile[i][3]) and int(x[1]) <= int(gfffile[i][4]) and gfffile[i][2] == 'gene': 
				x.append(gfffile[i][-1].split('ID=')[-1].split(';')[0])
				break
	return x;

#pickle partial object for compatibility with python v2.6
def _reconstruct_partial(f, args, kwds):
	return partial(f, *args, **(kwds or {}))

def _reduce_partial(p):
	return _reconstruct_partial, (p.func, p.args, p.keywords)

copy_reg.pickle(partial, _reduce_partial)

#creat partial of append_gene
append_part = partial(append_gene, gfffile=gffInp1)

#Now append gene from gff to relevant lines of haplotype file
pool1 = Pool(8)
hap1RatioFile1 = pool1.map(append_part, hap1RatioFile1)
pool1.close()
pool1.join()
#select only lines for which gene id was appended
hap1RatioFile1 = [x for x in hap1RatioFile1 if len(x) == 13]

#Select haplotypes with at least two SNP loci
hap1RatioFile2 = [x for i, x in enumerate(hap1RatioFile1) if i < len(hap1RatioFile1)-1 and \
			(x[9] == hap1RatioFile1[i+1][9] or x[9] == hap1RatioFile1[i-1][9])]

if hap1RatioFile1[-2][9] != hap1RatioFile1[-1][9]:
	 hap1RatioFile2 = hap1RatioFile2

if hap1RatioFile1[-2][9] == hap1RatioFile1[-1][9]:
	 hap1RatioFile2.append(hap1RatioFile1[-1])

#Calculate variance where there's a single exon per haplotype or
#inter-exon variance when there's more than one

exonvarlst = []
x1 = 0
x = 0
z = 0
def hap_var(lst):
    return numpy.std(lst);

def hap_av(lst):
    return numpy.mean(lst);

def hap_lst(hapfile):
	hrlst = []
	hapomeratiolst = []
	poslst = []
	poslst1 = []
	lstposlst = []
	lstposlst1 = []
	lstposlst2 = []
	lstposlst3 = []
	z = 0
	x = 0
	cnt = 0
	hapstrt = []
	for i in xrange(0, len(hapfile)):
		i = z
		if i == len(hapfile)-1:
			break
        	if i < len(hapfile)-1:
			#collect haplotype ratios per locus in a list
                	while hapfile[x][0] == hapfile[i+1][0] and hapfile[x][9] == hapfile[i+1][9]:
                    		hrlst.append(hapfile[i][10])
                    		i += 1
                    		z += 1
				if i == len(hapfile)-1:
					break
			hrlst.append(hapfile[i][10])
			#aggregate list of haplotype ratio list for all haplotpye of the transcriptome
                	hapomeratiolst.append(hrlst)
			hapstrt.append(str(x))
			while x <= i and i < len(hapfile)-1:
				poslst.append(hapfile[x][1])
                                poslst1.append(hapfile[x+1][1])
				x += 1
				cnt += 1
			while x <= i and i == len(hapfile)-1: 
				poslst.append(hapfile[x][1])
                                poslst1.append(hapfile[i][1])
				x += 1
				cnt += 1
			#create list of first and last positions of each haplotype of the transcriptome 		
			lstposlst.extend((poslst[0], poslst[-1], cnt))
			lstposlst1.extend((poslst1[0], poslst1[-1], cnt))
			lstposlst2.append(lstposlst)
			lstposlst3.append(lstposlst1)
                	x = i
                	x += 1
                	z += 1
			lstposlst = []
			lstposlst1 = []
			poslst = []
			poslst1 = []
			hrlst = []
			cnt = 0
	return {'lstOfHapRatiolsts': hapomeratiolst, 'lstOfhapStrtEnd1': lstposlst2, 'lstOfhapStrtEnd2': lstposlst3, 'hapStrtlnPos': hapstrt};

hapratiolst = hap_lst(hap1RatioFile2)
lstofhapratiolst = [[float(i) for i in x] for x in hapratiolst['lstOfHapRatiolsts']]

hapratiovarlst = pool.map(hap_var, lstofhapratiolst)	

#attach hap ratio variance of each haplotype to its constituent loci
count = 0
d = 0
z = 0
for i in xrange(0, len(hap1RatioFile2)):
	i = z
	if i < len(hap1RatioFile2)-1:
		while hap1RatioFile2[d][0] == hap1RatioFile2[i+1][0] and hap1RatioFile2[d][9] == hap1RatioFile2[i+1][9]:
			hap1RatioFile2[i].append(str(hapratiovarlst[count]))
			hap1RatioFile2[i].append(str(count))
			i += 1
			z += 1
			if i == len(hap1RatioFile2)-1:
					break
		hap1RatioFile2[i].append(str(hapratiovarlst[count]))
		hap1RatioFile2[i].append(str(count))
		#add count as index of haplotype list of transcriptome
		z += 1
		count += 1
		d = z

#define exon variance for cases of haplotype(s) within exon
def exon_variance(a, gfffile):
	q = 0
	p = 0
	k = 0
	hapcnt = 0
	for y in xrange(0, len(gfffile)):
		y = p
		if y == len(gfffile)-1:
			break
		if y < len(gfffile)-1:
                            
		    if (gfffile[y][2] == 'CDS' and gfffile[y][0] == a[0]) or (gfffile[y][2] == 'five_prime_UTR' and \
				gfffile[y][0] == a[0]) or (gfffile[y][2] == 'three_prime_UTR' and gfffile[y][0] == a[0]):
			hapidx = int(a[-1])
			hapstartpos = int(hapratiolst['lstOfhapStrtEnd1'][hapidx][0])
			hapendpos = int(hapratiolst['lstOfhapStrtEnd1'][hapidx][1])
			hapsize = int(hapratiolst['lstOfhapStrtEnd1'][hapidx][-1])

			#if haplotype is contained within exon 
                	if hapstartpos >= int(gfffile[y][3]) and hapendpos <= int(gfffile[y][4]):
                       		a.append(a[13])	
				break
			#Haplotype spans multiple exons in different genes
			if gfffile[y][-1].split('ID=')[-1].split('m.')[0] != a[12].split('m.')[0] \
					and hapstartpos < int(gfffile[y][4]) and \
						hapendpos > int(gfffile[y][4]) \
					and hapendpos > int(gfffile[y+1][3]) \
					and hapendpos < int(gfffile[y+1][4]):
				print "Strange exon arrangement detected in sample. Either a potential fusion between", gfffile[y][-1].split('ID=')[-1].split('.CDS')[0], "and", \
					a[12], "or the unlikely event of a wrong gene annotation in", a[0] 
				a.append(a[13])	
				break
			##Haplotype spans multiple exons in same genes
			if hapstartpos < int(gfffile[y][4]) and hapendpos > int(gfffile[y][4]) and hapendpos > int(gfffile[y+1][3]) \
					and hapendpos < int(gfffile[y+1][4]) and gfffile[y][-1].split('ID=')[-1].split('m.')[0] == a[12].split('m.')[0]:
				a.append(a[13])	
				break
			if hapstartpos < int(gfffile[y][4]) and hapendpos > int(gfffile[y][4]):
				a.append(a[13])	
				break

			#if exon does not intersect in anyway at postions excluding the last line of annotation file 
			if y < len(gfffile)-1 and hapstartpos > int(gfffile[y][3]) and hapendpos > int(gfffile[y][4]) or \
				hapstartpos < int(gfffile[y][3]) and hapendpos < int(gfffile[y][4]):
			     p += 1
			     
		    else:
			p += 1
	return a;	
					
exon_varpart = partial(exon_variance, gfffile=gffInp1)
pool1 = Pool(8)
hap1RatioFile2 = pool1.map(exon_varpart, hap1RatioFile2)
pool1.close()
pool1.join()
	
def exon_variance1(b, gfffile):	
	exoncnt = 1
	cnt = 1
	k = 1
	p = 0
	nxtsnppos = None
	exonratiolst = []
	exonratioavlst = []
	for y in xrange(0, len(gfffile)):
		y = p
		if y == len(gfffile)-1:
			break
		if y < len(gfffile)-1:
			hapidx = int(b[-2]) if len(b) == 16 else int(b[-1])
			hapstartpos = int(hapratiolst['lstOfhapStrtEnd1'][hapidx][0])
			hapendpos = int(hapratiolst['lstOfhapStrtEnd1'][hapidx][1])
			hapsize = int(hapratiolst['lstOfhapStrtEnd1'][hapidx][-1])
			#if exon(s) is within haplotype
			if (gfffile[y][2] == 'CDS' or gfffile[y][2] == 'five_prime_UTR' or gffInp1[y][2] == 'three_prime_UTR') and \
					gfffile[y][0] == b[0] and hapstartpos <= int(gfffile[y][3]) and \
					hapendpos > int(gfffile[y][4]): 	
				nxtsnppos = int(b.next()[1])
                           	if nxtsnppos > int(gfffile[y][4]):                          
					hapratioav1 = float(b[10])
				exonratiolst.append(b[10])
				d = b
                         	while int(d.next()[1]) <= int(gfffile[y][4]):
					d = d.next()
					exonratiolst.append(d[10])
					hapratioav1 = hap_av(exonratiolst)
					cnt += 1
					k += 1	
				exonratioavlst.append(hapratioav1)	
                                if nxtsnp < hapendpos:
					p += 1
					exoncnt += 1
					k = 0
					b = d
					exonratiolst = []
					continue
				#if next SNP is outside current halotype and haplotype has more than one exon within
                                if hapendpos < nxtsnppos and exoncnt > 1:	
                                       	stdevtn = hap_var(exonratioavlst)
					print exonratioavlst	
					while cnt > 0:
                                       		b.append(str(stdevtn))
						b = b.next()
						cnt -= 1
					break
				#if next SNP is outside current halotype and haplotype has only a single exon within	
                                if hapendpos < nxtsnp and exoncnt == 1:
                                        stdevtn = hap_var(exonratiolst)
					while k > 0:
                                       		b.append(str(stdevtn))
						b = b.next()
						k -= 1
                                        break
			else:
				p += 1
	return b;

exon_varpart1 = partial(exon_variance1, gfffile=gffInp1)
pool2 = Pool(8)
hap1RatioFile2 = pool2.map(exon_varpart1, hap1RatioFile2)
pool2.close()
pool2.join()

for x in xrange(0, len(hap1RatioFile2)-1):
	del hap1RatioFile2[x][13:14]
						   
print hap1RatioFile2
                   		
AllgenesOut = open("Allgenes", 'w+')
ASEgenesOut = open("ASEgenes", 'w+')
disparityArray = []
#Iterate through new hap ratio file and calculate average hap ratio, standard deviation and
#normalised disparity ratio across each haplotype segment for All genes
x = 0
j = 1
z = 0
p = 0
k = 0
x1 = 0
a = 0
v = 0
cisvarlst = []
biasvarlst = []
hap1RatioAvlst = []
refratiolst = []
cisproblst = []
biasproblst = []
ARPproblst = []
ARPposteriorlst = []
biasposteriorlst = []
cislst = []
ARPlst = []
for i in range(0, len(hap1RatioFile2)):	        
	i = z
	if i < len(hap1RatioFile2)-1: 	   		
		hap1Ratiosum = float(hap1RatioFile2[i][10])
		refratiosum = float(hap1RatioFile2[i][11])
		while hap1RatioFile2[x][0] == hap1RatioFile2[i+1][0] and hap1RatioFile2[x][9] == hap1RatioFile2[i+1][9]:
			hap1Ratiosum1 = float(hap1RatioFile2[i+1][10])
			refratiosum1 = float(hap1RatioFile1[i+1][11])
			hap1Ratiosum = hap1Ratiosum + hap1Ratiosum1
			refratiosum = refratiosum + refratiosum1
			hap1RatioAv = hap1Ratiosum / (j+1)
			refratioAv = refratiosum / (j+1)
			z += 1
	     		i += 1
			j += 1
                        
		hap1RatioAvlst.append(str(hap1RatioAv))
		refratiolst.append(str(refratioAv))
		sqdev = 0
		sqdev2 = 0
		n = 1
		while x <= i:
			dev = float(hap1RatioFile2[x][10]) - float(hap1RatioAvlst[k])
			dev1 = float(hap1RatioFile2[x][11]) - float(refratiolst[k])
			sqdev1 = dev**2
			sqdev3 = dev1**2
			sqdev = sqdev + sqdev1
			sqdev2 = sqdev2 + sqdev3
			var = sqdev/n
			var1 = sqdev2/n
			stdev = var**0.5
			stdev2 = var1**0.5
			n += 1
			x += 1
		x = x1
		while x <= i:
                       	cisvarlst.append(str(stdev))
                       	biasvarlst.append(str(stdev2))
	        	x += 1
		x = x1
		
		while x <= i:
			refcount = float(hap1RatioFile2[x][5])
			altcount = float(hap1RatioFile2[x][6])
			totcount = int(hap1RatioFile2[x][7])
			cisvar = float(cisvarlst[x])
			biasvar = float(biasvarlst[x])
			exonvar = float(exonvarlst[v])
			cisprob = float(refcount - altcount)/int(refcount+(2*refcount*cisvar)) if refcount/totcount >= 0.5 \
					else float(altcount - refcount)/int(altcount+(2*altcount*cisvar))
			biasprob = float(refcount - altcount)/int(refcount+(2*refcount*biasvar)) if refcount/totcount >= 0.5 \
					else float(altcount - refcount)/int(altcount+(2*altcount*biasvar))
			ARPprob = float(refcount - altcount)/int(refcount+(2*refcount*exonvar)) if refcount/totcount >= 0.5 \
					else float(altcount - refcount)/int(altcount+(2*altcount*exonvar))
			cisproblst.append(str(cisprob))
			biasproblst.append(str(biasprob))
			ARPproblst.append(str(ARPprob))
			x += 1
		cislst.append(cisproblst)
		ARPlst.append(ARPproblst)	
		x -= 1
		if x == i and hap1RatioFile2[i][9] != hap1RatioFile2[i+1][9] and hap1RatioFile2[i][9] == hap1RatioFile2[i-1][9]:
			hap1RatioFile2[i].append(str(hap1RatioAv))
			
		x = i
		while a < x:
			a += 1
		x1 = a
		x1 += 1
               	z += 1           
        	x += 1
		j = 1
		k += 1
		v += 1
		cisproblst = []
		ARPproblst = []       
    	if i == len(hap1RatioFile2)-1:  
     		break

#Model proabilities calculated from disparity ratio as beta distribution for use as prior in Bayes Inference problem
cisAvlst = [numpy.mean(x) for x in cislst]
cisvarlst = [numpy.var(x) for x in cislst]
cisalpha = [(i**2*(1-i)/j) - i for i in cisAvlst for j in cisvarlst]
cisbeta = [x*(1-y)/y for x in cisalpha for y in cisAvlst]

ARPAvlst = [numpy.mean(x) for x in ARPlst]
ARPvarlst = [numpy.var(x) for x in ARPlst]
ARPalpha = [(i**2*(1-i)/j) - i for i in ARPAvlst for j in ARPvarlst]
ARPbeta = [x*(1-y)/y for x in ARPalpha for y in ARPAvlst]

biasprobAv = numpy.mean(biasproblst)
biasprobvar = numpy.var(biasproblst)
biasalpha = (biasprobAv**2*(1-biasprobAv)/biasprobAv) - biasprobAv
biasbeta = biasalpha*(1-biasprobAv)/biasprobAv

#Estimate posterior probability of alternative RNA processing 
x = 0
j = 0
z = 0
for i in range(0, len(hap1RatioFile2)):
    y = 1
    i = z
    if i < len(hap1RatioFile2)-1 and (hap1RatioFile2[i][9] == hap1RatioFile2[i+1][9] or hap1RatioFile2[i][9] == hap1RatioFile2[i-1][9]):  	
	disparitycount = 0
	paritycount = 0
	ARPalpha = ARPalpha[j]
	ARPalpha1 = ARPalpha[j]
	ARPbeta = ARPbeta[j]
	ARPbeta1 = ARPbeta[j]
	while hap1RatioFile2[x][9] == hap1RatioFile2[i+1][9]:
		HAcount = int(hap1RatioFile2[i][6]) if float(hap1RatioFile2[i][6])/int(hap1RatioFile2[i][7]) > 0.5 else int(hap1RatioFile2[i][5])
		ARPalpha1 = disparitycount+ARPalpha1
                ARPbeta1 = paritycount+ARPbeta1
		disparitycount = float(hap1RatioFile2[i][12])*HAcount
		disparitycount = int(round(disparitycount))
		paritycount = HAcount - disparitycount
		ARPposterior = float(ARPalpha1+disparitycount-1)/int(ARPalpha1+ARPbeta1+HAcount-2) 
                z += 1
                i += 1
	x = i
	
        if x == i and hap1RatioFile2[i][9] != hap1RatioFile2[i+1][9] and hap1RatioFile2[i][9] == hap1RatioFile2[i-1][9]:
            ARPposteriorlst.append(str(ARPposterior))
        z += 1
        x = i
        x += 1
        j += 1
    if i == len(hap1RatioFile2)-1:  
	     break

#Estimate posterior probability of reference bias
x = 0
j = 0
z = 0
for i in range(0, len(hap1RatioFile2)):
    y = 1
    i = z
    if i < len(hap1RatioFile2)-1 and (hap1RatioFile2[i][9] == hap1RatioFile2[i+1][9] or hap1RatioFile2[i][9] == hap1RatioFile2[i-1][9]):  	
	disparitycount = 0
	paritycount = 0
	biasalpha1 = biasalpha
	biasbeta1 = biasbeta[j]
	while hap1RatioFile2[x][9] == hap1RatioFile2[i+1][9]:
		HAcount = int(hap1RatioFile2[i][6]) if float(hap1RatioFile2[i][6])/int(hap1RatioFile2[i][7]) > 0.5 else int(hap1RatioFile2[i][5])
		biasalpha1 = disparitycount+biasalpha1
                biasbeta1 = paritycount+biasbeta1
		disparitycount = float(hap1RatioFile2[i][12])*HAcount
		disparitycount = int(round(disparitycount))
		paritycount = HAcount - disparitycount
		biasposterior = float(biasalpha1+disparitycount-1)/int(biasalpha1+biasbeta1+HAcount-2) 
                z += 1
                i += 1
	while x < i: 
                x += 1
	
        if x == i and hap1RatioFile2[i][9] != hap1RatioFile2[i+1][9] and hap1RatioFile2[i][9] == hap1RatioFile2[i-1][9]:
            biasposteriorlst.append(str(biasposterior))
        z += 1
        x = i
        x += 1
        j += 1
    if i == len(hap1RatioFile2)-1:  
	     break
                                                                           
print ARPposteriorlst
print biasposteriorlst
                                                                           
#Estimate posterior probability of cis variation-mediated haplotype imbalance
k = 0
x = 0
j = 0
z = 0
for i in range(0, len(hap1RatioFile2)):
    y = 1
    i = z
    if i < len(hap1RatioFile2)-1 and (hap1RatioFile2[i][9] == hap1RatioFile2[i+1][9] or hap1RatioFile2[i][9] == hap1RatioFile2[i-1][9]):
        disparitycount = 0
	paritycount = 0
	cisalpha = cisalpha[j]
	cisalpha1 = cisalpha
	cisbeta = cisbeta[j]
	cisbeta1 = cisbeta
	while hap1RatioFile2[x][9] == hap1RatioFile2[i+1][9]:
		HAcount = int(hap1RatioFile2[i][6]) if float(hap1RatioFile2[i][6])/int(hap1RatioFile2[i][7]) > 0.5 else int(hap1RatioFile2[i][5])
		cisalpha1 = disparitycount+cisalpha1
                cisbeta1 = paritycount+cisbeta1
		disparitycount = float(hap1RatioFile2[i][12])*HAcount
		disparitycount = int(round(disparitycount))
		paritycount = HAcount - disparitycount
		cisposterior = float(cisalpha1+disparitycount-1)/int(cisalpha1+cisbeta1+HAcount-2) 
                z += 1
                i += 1	
	while x < i: 
                x += 1
        if x == i and hap1RatioFile2[i][9] != hap1RatioFile2[i+1][9] and hap1RatioFile2[i][9] == hap1RatioFile2[i-1][9]:         
            lrt = float(ARPposteriorlst[k])/cisposterior if cisposterior > 0 else 0
            lrt1 = float(biasposteriorlst[k])/cisposterior if cisposterior > 0 else 0 
	    hap1RatioFile2[i].append(str(lrt))
            hap1RatioFile2[i].append(str(lrt1))
	    k += 1
            AllgenesOut.write('\t'.join(hap1RatioFile2[i]) + "\n")
        z += 1
        x = i
        x += 1
        j += 1
    if i == len(hap1RatioFile2)-1:  
	     break

#Iterate through new hap ratio file and output only for ASE genes
for i in range(0, len(hap1RatioFile2)):	
	if i < len(hap1RatioFile2)-1 and (hap1RatioFile2[i][9] == hap1RatioFile2[i+1][9] or hap1RatioFile2[i][9] == hap1RatioFile2[i-1][9]):
		if len(hap1RatioFile2[i]) > 12 and float(hap1RatioFile2[i][13]) <= 0.67 and float(hap1RatioFile2[i][14]) <= 0.67:
			ASEgenesOut.write('\t'.join(hap1RatioFile2[i]) + "\n")  
    	if i == len(hap1RatioFile2)-1:  
	     break
